library(FSelector)
require(ggplot2)
require(tidyquant)
require(corrr)
source('src/graphics.R')
#source('src/visualize_data.R')
CV_data <- fread('churn.all.txt')
names = c('state', 'account_length', 'area_code', 'phone_number', 'international_plan', 'voice_mail_plan',
'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'Churn')
names(CV_data) <- names
head(CV_data)
# eliminate variables
CV_data <- CV_data %>%  select(-phone_number) %>% mutate(Churn = as.character(Churn), Churn = if_else(Churn == "False." , 0, 1))
# DUMMIES -----------------------------------------------------------------------------------------------
#Transform character to dummies
rec_obj <- recipe(Churn ~ ., data = CV_data) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
#step_discretize(premium, options = list(cuts = 6)) %>%
prep(data = data)
CV_data    <- bake(rec_obj, new_data = CV_data)
CV_data    <- as.data.table(data)
CV_data <- CV_data %>%  select(-area_code)
dim(CV_data)
dt <- only_numeric_variables(CV_data) # take only numeric data for now
dt <- data.frame(dt.x, churn = CV_data$Churn)
m = mean(dt$total_eve_charge) + mean(dt$total_night_charge) + mean(dt$total_day_charge) + mean(dt$total_intl_charge)
m
#dt <- dt %>% mutate(consume_high = ifelse(total_eve_charge + total_night_charge + total_day_charge +
#                                            total_intl_charge < m, 0, 1))
#table(dt$consume_high)
dt.x <- dt %>%  select('account_length', 'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'international_plan_yes', 'voice_mail_plan_yes',
'churn')
# include variable
CorrelationGraph(dt.x, tam= 1.5, figures.dir = 'fig')
rm(list=ls())
require(data.table)
require(dplyr)
require(recipes)
require(lubridate)
require(arules)
library(FSelector)
require(ggplot2)
require(tidyquant)
require(corrr)
source('src/graphics.R')
#source('src/visualize_data.R')
CV_data <- fread('churn.all.txt')
names = c('state', 'account_length', 'area_code', 'phone_number', 'international_plan', 'voice_mail_plan',
'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'Churn')
names(CV_data) <- names
head(CV_data)
# eliminate variables
CV_data <- CV_data %>%  select(-phone_number) %>% mutate(Churn = as.character(Churn), Churn = if_else(Churn == "False." , 0, 1))
# DUMMIES -----------------------------------------------------------------------------------------------
#Transform character to dummies
rec_obj <- recipe(Churn ~ ., data = CV_data) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
#step_discretize(premium, options = list(cuts = 6)) %>%
prep(data = data)
CV_data    <- bake(rec_obj, new_data = CV_data)
CV_data    <- as.data.table(data)
CV_data <- CV_data %>%  select(-area_code)
dim(CV_data)
dt <- only_numeric_variables(CV_data) # take only numeric data for now
dt <- data.frame(dt, churn = CV_data$Churn)
m = mean(dt$total_eve_charge) + mean(dt$total_night_charge) + mean(dt$total_day_charge) + mean(dt$total_intl_charge)
m
#dt <- dt %>% mutate(consume_high = ifelse(total_eve_charge + total_night_charge + total_day_charge +
#                                            total_intl_charge < m, 0, 1))
#table(dt$consume_high)
dt.x <- dt %>%  select('account_length', 'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'international_plan_yes', 'voice_mail_plan_yes',
'churn')
# include variable
CorrelationGraph(dt.x, tam= 1.5, figures.dir = 'fig')
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt)
g <- gain_info_graph(dt.values.no.interactions, top = 20)
g$d
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt %>%  select(-Churn))
g <- gain_info_graph(dt.values.no.interactions, top = 20)
g$d
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt.x %>%  select(-Churn))
rm(list=ls())
require(data.table)
require(dplyr)
require(recipes)
require(lubridate)
require(arules)
library(FSelector)
require(ggplot2)
require(tidyquant)
require(corrr)
source('src/graphics.R')
#source('src/visualize_data.R')
CV_data <- fread('churn.all.txt')
names = c('state', 'account_length', 'area_code', 'phone_number', 'international_plan', 'voice_mail_plan',
'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'Churn')
names(CV_data) <- names
head(CV_data)
# eliminate variables
CV_data <- CV_data %>%  select(-phone_number) %>% mutate(Churn = as.character(Churn), Churn = if_else(Churn == "False." , 0, 1))
# DUMMIES -----------------------------------------------------------------------------------------------
#Transform character to dummies
rec_obj <- recipe(Churn ~ ., data = CV_data) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
#step_discretize(premium, options = list(cuts = 6)) %>%
prep(data = data)
CV_data    <- bake(rec_obj, new_data = CV_data)
CV_data    <- as.data.table(data)
CV_data <- CV_data %>%  select(-area_code)
dim(CV_data)
dt <- only_numeric_variables(CV_data) # take only numeric data for now
dt <- data.frame(dt, churn = CV_data$Churn)
m = mean(dt$total_eve_charge) + mean(dt$total_night_charge) + mean(dt$total_day_charge) + mean(dt$total_intl_charge)
m
#dt <- dt %>% mutate(consume_high = ifelse(total_eve_charge + total_night_charge + total_day_charge +
#                                            total_intl_charge < m, 0, 1))
#table(dt$consume_high)
dt.x <- dt %>%  select('account_length', 'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'international_plan_yes', 'voice_mail_plan_yes',
'churn')
# include variable
CorrelationGraph(dt.x, tam= 1.5, figures.dir = 'fig')
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt.x %>%  select(-churn))
g <- gain_info_graph(dt.values.no.interactions, top = 20)
g$d
names(dt.x)
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt.x %>%  select(-churn))
names(dt)
dt %>%  select(-churn)
information.gain(churn ~., dt %>%  select(-churn))
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt)
g <- gain_info_graph(dt.values.no.interactions, top = 20)
g$d
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt %>%  select(-Churn))
g <- gain_info_graph(dt.values.no.interactions, top = 20)
g$d
rm(list=ls())
require(data.table)
require(dplyr)
require(recipes)
require(lubridate)
require(arules)
library(FSelector)
require(ggplot2)
require(tidyquant)
require(corrr)
source('src/graphics.R')
#source('src/visualize_data.R')
CV_data <- fread('churn.all.txt')
names = c('state', 'account_length', 'area_code', 'phone_number', 'international_plan', 'voice_mail_plan',
'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'Churn')
names(CV_data) <- names
head(CV_data)
# eliminate variables
CV_data <- CV_data %>%  select(-phone_number) %>% mutate(Churn = as.character(Churn), Churn = if_else(Churn == "False." , 0, 1))
# DUMMIES -----------------------------------------------------------------------------------------------
#Transform character to dummies
rec_obj <- recipe(Churn ~ ., data = CV_data) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
#step_discretize(premium, options = list(cuts = 6)) %>%
prep(data = data)
CV_data    <- bake(rec_obj, new_data = CV_data)
CV_data    <- as.data.table(data)
CV_data <- CV_data %>%  select(-area_code)
dim(CV_data)
dt <- only_numeric_variables(CV_data) # take only numeric data for now
dt <- data.frame(dt, churn = CV_data$Churn)
m = mean(dt$total_eve_charge) + mean(dt$total_night_charge) + mean(dt$total_day_charge) + mean(dt$total_intl_charge)
m
#dt <- dt %>% mutate(consume_high = ifelse(total_eve_charge + total_night_charge + total_day_charge +
#                                            total_intl_charge < m, 0, 1))
#table(dt$consume_high)
dt.x <- dt %>%  select('account_length', 'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'international_plan_yes', 'voice_mail_plan_yes',
'churn')
# include variable
CorrelationGraph(dt.x, tam= 1.5, figures.dir = 'fig')
#Information gain
dt.values.no.interactions <- information.gain(churn ~., dt %>%  select(-Churn))
g <- gain_info_graph(dt.values.no.interactions, top = 20)
g$d
dt
DIM(dt)
dim(dt)
##################################################
#arbol #ojo con la data
control.values <- tree.control(nrow(dt), mincut = 0, minsize = 2, mindev = 0.01)
require(tree)
##################################################
#arbol #ojo con la data
control.values <- tree.control(nrow(dt), mincut = 0, minsize = 2, mindev = 0.01)
#method = "recursive.partition",
#split = c("deviance", "gini"),
m1.tr <- tree(m1$churn ~.,m1[, 1:68, with = F], split = "deviance", wts="TRUE") #usamos el estad?stico de Gini...
require(tree)
install.packages('tree')
control.values <- tree.control(nrow(dt), mincut = 0, minsize = 2, mindev = 0.01)
control.values <- tree.control(nrow(dt), mincut = 0, minsize = 2, mindev = 0.01)
#method = "recursive.partition",
#split = c("deviance", "gini"),
m1.tr <- tree(m1$churn ~.,m1[, 1:68, with = F], split = "deviance", wts="TRUE") #usamos el estad?stico de Gini...
require(tree)
control.values <- tree.control(nrow(dt), mincut = 0, minsize = 2, mindev = 0.01)
#method = "recursive.partition",
#split = c("deviance", "gini"),
m1.tr <- tree(m1$churn ~.,m1[, 1:68, with = F], split = "deviance", wts="TRUE") #usamos el estad?stico de Gini...
##################################################
m1 = dt
control.values <- tree.control(nrow(m1), mincut = 0, minsize = 2, mindev = 0.01)
#method = "recursive.partition",
#split = c("deviance", "gini"),
m1.tr <- tree(m1$churn ~.,m1[, 1:68, with = F], split = "deviance", wts="TRUE") #usamos el estad?stico de Gini...
#method = "recursive.partition",
#split = c("deviance", "gini"),
m1.tr <- tree(m1$churn ~.,m1[, 1:68], split = "deviance", wts="TRUE") #usamos el estad?stico de Gini...
m1.tr
summary(m1.tr)
plot(m1.tr); text(m1.tr)
##################################################
m1 = dt %>%  select(-Churn)
control.values <- tree.control(nrow(m1), mincut = 0, minsize = 2, mindev = 0.01)
#method = "recursive.partition",
#split = c("deviance", "gini"),
m1.tr <- tree(m1$churn ~.,m1[, 1:68], split = "deviance", wts="TRUE") #usamos el estad?stico de Gini...
m1.tr
summary(m1.tr)
plot(m1.tr); text(m1.tr)
pred <- predict(m1.tr,m1[, 1:68])
result <- rep(0, length(pred))
result[pred[, 2] >= 0.5] <- 1
pred
dim(pred)
result
pred
result[pred >= 0.5] <- 1
source('Metrics/confusionMatrix.R')
mc(result, as.numeric(as.character(m1[,69])), print = 1)
confusi<-matrix(c(bb,gb,gb+bb, bg,gg,gg+bg,bg+bb,gg+gb,length(real)),ncol=3,nrow=3,byrow = TRUE,
dimnames = list(c("Class", "Original",""),c("Class", "Predicted","")))
mc <- function(result, real, imprimir = 0)
{
#para hacer una matriz de confusi?n
conf<-vector(mode="numeric")
s=0
for (i in 1:length(real))
{
if (real[i]!=result[i])
{
s=s+1
conf[s]=real[i] #mal clasificados # 1=> bueno clasificado como malo, y 0 viceversa
}
}
#total de Buenos en la realidad
ng<-length(real[real==1])
#total de malos en la realidad
nb<-length(real[real==0])
#total de buenos clasificados como malos
bg<-length(conf[conf==1])
#total de malos clasificados como buenos
gb<-length(conf[conf==0])
#total de buenos bien clasificados
gg<-ng-bg
#total de malos bien clasificados
bb<-nb-gb
#TASA DE EXACTITUD
tasaexact  <- (gg+bb)/(gg+bb+gb+bg) #que tan buena fue la clasificaci?n, ACCURACITY
precision  <- gg/(gb+gg)
TP         <- gg/(gg+bg)
FP         <- gb/(gb+bb)
TN         <- bb/(bb+gb)
FN         <- bg/(bg+gg)
recall     <- gg/(gg + bg) #TP/(TP + FN)
f1         <- 2*precision*recall/(precision + recall) #2*precision2*recall/(precision2 + recall)
if (imprimir==1){
#ORIGINAL
#l=c("G","B","TOTAL")
#confusi<-matrix(c(gg,gb,gg+gb,bg,bb,bg+bb,ng,nb,length(real)),ncol=3,nrow=3,byrow = TRUE,
#                dimnames = list(c("Class", "Predicted",""),c("Class", "Original","")))
#confusi<-rbind(l,confusi)
#l=c("","G","B","TOTAL")
#confusi<-as.data.frame(cbind(l,confusi))
#print(confusi)
# TRANSPOSE
l=c("B","G","TOTAL")
confusi<-matrix(c(bb,gb,gb+bb, bg,gg,gg+bg,bg+bb,gg+gb,length(real)),ncol=3,nrow=3,byrow = TRUE,
dimnames = list(c("Class", "Original",""),c("Class", "Predicted","")))
confusi <- rbind(l,confusi)
l=c("","B","G","TOTAL")
confusi<-as.data.frame(cbind(l,confusi))
print(confusi)
print("########################################################")
relacionado<-matrix(c(tasaexact,TP, FP, TN, FN, precision, recall, f1),nrow= 8,ncol=1,
dimnames = list(c("E", "TP","FP","TN","FN","P", "recall", "f1")))
print(relacionado)
}
#error de clasificaci?n
error <- 1 - tasaexact
TP <- gg/(gg+bg)
FP <- gb/(gb+bb)
return(list(Error = error, Precision = precision, TP = TP, FP = FP, recall = recall, f1 =f1,
pos_cases = gg))
#return(72000*bg+20000*gb)
#return(gb)
}
mc(result, as.numeric(as.character(m1[,69])), print = 1)
mc(result, as.numeric(as.character(m1[,69])),)
require(SDMTools)
install.packages('SDMTools')
confusion.matrix(m1[, 69], result, threshold = 0.5)
require(SDMTools)
confusion.matrix(m1[, 69], result, threshold = 0.5)
m1[, 69]
m1
confusion.matrix(m1$churn, result, threshold = 0.5)
head(m1)
data_long <- gather(m1, condition, measurement, account_length:churn, factor_key=TRUE)
data_long
data_long <- gather(m1, variable, value, account_length:churn, factor_key=TRUE)
data_long
head(m1)
data_long <- gather(m1, variable, value, account_length:voice_mail_plan_yes, factor_key=TRUE)
data_long M head8)
data_long %>% head()
#
p <- ggplot(data = df.m, aes(x=variable, y=churn))
#
p <- ggplot(data = data_long, aes(x=variable, y=churn))
p <- p + geom_boxplot(aes(fill=Label))
p <- p + geom_jitter()
p <- p + facet_wrap( ~ variable, scales="free")
p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title")
p <- p + guides(fill=guide_legend(title="Legend_Title"))
p
#
p <- ggplot(data = data_long, aes(x=variable, y=churn))
p <- p + geom_boxplot(aes(fill=churn))
p <- p + geom_jitter()
p <- p + facet_wrap( ~ variable, scales="free")
p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title")
p <- p + guides(fill=guide_legend(title="Legend_Title"))
p
#-----------------------------------------------------------------------------------------------------
m1 <- m1 %>% select('account_length', 'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes',
'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge',
'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls', 'international_plan_yes', 'voice_mail_plan_yes',
'churn')
data_long <- gather(m1, variable, value, account_length:voice_mail_plan_yes, factor_key=TRUE)
data_long %>% head()
#
p <- ggplot(data = data_long, aes(x=variable, y=churn))
p <- p + geom_boxplot(aes(fill=churn))
p <- p + geom_jitter()
p <- p + facet_wrap( ~ variable, scales="free")
p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title")
p <- p + guides(fill=guide_legend(title="Legend_Title"))
p
p <- ggplot(data = data_long, aes(x=variable, y=churn))
p <- p + geom_boxplot(aes(fill=churn))
#p <- p + geom_jitter()
p <- p + facet_wrap( ~ variable, scales="free")
p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title")
p <- p + guides(fill=guide_legend(title="Legend_Title"))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=churn))
p + facet_wrap( ~ variable, scales="free")
p
data_long %>% head()
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn)))
p + facet_wrap( ~ variable, scales="free")
p
p <- ggplot(data = data_long, aes(x=variable, y=churn))
p <- p + geom_boxplot(aes(fill=factor(churn)))
#p <- p + geom_jitter()
p <- p + facet_wrap( ~ variable, scales="free")
p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title")
p <- p + guides(fill=guide_legend(title="Legend_Title"))
p
p <- ggplot(data = data_long, aes(x=variable, y=churn))
p <- p + geom_boxplot(aes(fill=factor(churn)))
#p <- p + geom_jitter()
p <- p + facet_wrap( ~ variable, scales="free")
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn)))
p + facet_wrap( ~ variable, scales="free")
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable, scales="free")
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable, scales="free") + theme(axis.text.x=element_text(size=rel(0.5), angle=90))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable, scales="free") + theme(axis.text.x=element_text(size=rel(5), angle=90))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable, scales="free") + theme(axis.text.x=element_text(size=rel(15), angle=90))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable, scales="free") + theme(axis.text.x=element_text(size=(15), angle=90))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable, scales="free") + theme(axis.text.x=element_text(size=(150), angle=90))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable, scales="free") + theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip()
p + facet_wrap( ~ variable) + theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) #+ coord_flip()
p + facet_wrap( ~ variable) + theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) #+ coord_flip()
p + facet_wrap( ~ variable) + theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) #+ coord_flip()
p + facet_wrap( ~ variable) + theme(text = element_text(size=20),
axis.label.x = element_text(angle=45, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) #+ coord_flip()
p + facet_wrap( ~ variable)
p <- p + theme(text = element_text(size=20),axis.text.x = element_text(angle=45, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) + coord_flip() +
p + facet_wrap( ~ variable)
p <- p + theme(text = element_text(size=20),axis.text.x = element_text(angle=90, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) +
p <- p+ coord_flip()
p + facet_wrap( ~ variable)
p <- p + theme(text = element_text(size=20),axis.text.x = element_text(angle=90, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=factor(churn))) +
p <- p+ coord_flip()
p <- p + facet_wrap( ~ variable)
p <- p + theme(text = element_text(size=20),axis.text.x = element_text(angle=90, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +  geom_boxplot(aes(fill=factor(churn)))
p <- p+ coord_flip()
p <- p + facet_wrap( ~ variable)
p <- p + theme(text = element_text(size=20),axis.text.x = element_text(angle=90, hjust=1))
p
p <- ggplot(data = data_long, aes(x=variable, y=value)) +  geom_boxplot(aes(fill=factor(churn)))
p <- p+ coord_flip()
#p <- p + facet_wrap( ~ variable)
p <- p + theme(text = element_text(size=20),axis.text.x = element_text(angle=90, hjust=1))
p
4293/(4293+473)
991+307
52+150
991+52
307+150
1043+457
1298+202
1258+40
41+161
1722+204
1258+41
40+161
1299+201
1298+201
1100+58
198+144
1755+171
100+198
1100+198
58+144
1298+202
1158+342
